{
  "comments": [
    {
      "key": {
        "uuid": "ec402037_3b8bce2c",
        "filename": "BUILD",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-22T07:55:48Z",
      "side": 1,
      "message": "What supposed to be the plugin\u0027s final artifact? One HTML file? a combination of HTML and JS files? Or better one single zip file, that combined HTML and JS file in one single archive?\n\nIf I build this plugin in gerrit tree build mode, then two files are created[1]:\n\n* bazel-bin/plugins/codemirror-editor/codemirror-editor.html\n* bazel-bin/plugins/codemirror-editor/codemirror-editor.js\n\nThe codemirror-editor.html references codemirror-editor.js.\n\n  \u003chead\u003e\u003cscript src\u003d\"codemirror-editor.js\" defer\u003d\"\"\u003e\u003c/script\u003e\n\nHowever, the vulcanize rule produces intermediate single file:\n\n  $ ls -all bazel-out/k8-fastbuild/genfiles/plugins/codemirror-editor/codemirror-editor.html.vulcanized.html\n-r-xr-xr-x 1 davido users 170127 Nov 22 08:08 bazel-out/k8-fastbuild/genfiles/plugins/codemirror-editor/codemirror-editor.html.vulcanized.html\n\nthat is split by Crisper. Usually, with gerrit plugins, only one single artifact is provided and deployed (jar or html file):\n\nSo either we can build one single html file, or we shoud consider to make vulcanize rule as intermediate rule, and make final artifact for this plugin as codemirrow-editor.zip and ship both (or even more files) into zip file, something similar, what is done in gerrit core for PG UI: [2].\n\n* [1] http://paste.openstack.org/show/627034\n* [2] https://github.com/GerritCodeReview/gerrit/blob/master/polygerrit-ui/app/rules.bzl#L68-L92\n\nSo, something like that would produce one single artifact:\n\n  vulcanize(\n    name \u003d \"codemirror\",\n    srcs \u003d [\"editor.html\"],\n    app \u003d \"editor.html\",\n    visibility \u003d [\"//visibility:public\"],\n    deps \u003d [\"//lib/js:codemirror-minified\"],\n  )\n  genrule2(\n    name \u003d \"codemirror-editor\",\n    srcs \u003d [\":codemirror\"],\n    visibility \u003d [\"//visibility:public\"],\n    outs \u003d [\"codemirror-editor.zip\"],\n    cmd \u003d \" \u0026\u0026 \".join([\n        \"cp $(SRCS) $$TMP\",\n        \"cd $$TMP\",\n        \"zip -qr $$ROOT/$@ .\",\n    ]),\n  )\n\nSo that after building, we would get:\n\n  davido@wizball:~/projects/gerrit ((9cc3ced356...) %)$ bazel build plugins/codemirror-editor:codemirror-editor\nINFO: Analysed target //plugins/codemirror-editor:codemirror-editor (1 packages loaded).\nINFO: Found 1 target...\nTarget //plugins/codemirror-editor:codemirror-editor up-to-date:\n  bazel-genfiles/plugins/codemirror-editor/codemirror-editor.zip\nINFO: Elapsed time: 4.690s, Critical Path: 4.31s\nINFO: Build completed successfully, 4 total actions\ndavido@wizball:~/projects/gerrit ((9cc3ced356...) %)$ unzip -t bazel-genfiles/plugins/codemirror-editor/codemirror-editor.zip\nArchive:  bazel-genfiles/plugins/codemirror-editor/codemirror-editor.zip\n    testing: codemirror.html          OK\n    testing: codemirror.js            OK\n\nProbably, the gerrit core deployment machinery should be extended to handle zip file extension for plugin.",
      "revId": "8288f8f217600b5c74828e88431a5fb201db5ced",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3fe2079_93b48adc",
        "filename": "BUILD",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2017-11-27T21:35:59Z",
      "side": 1,
      "message": "I\u0027m actually not sure yet what the final artifact should be. I think one single HTML file should be fine, but also wouldn\u0027t be opposed to a zip. Separating the script from the HTML may also allow us to perform some nice optimizations, like only loading the script if the editor is ever actually needed.\n\nI\u0027ve seen that there are the two outputs -- what I\u0027m currently unsure of is how we go from a built plugin with the outputs in bazel-bin to something that ends up in a proper Gerrit testsite (I\u0027d assume by modifying the init script?)",
      "parentUuid": "ec402037_3b8bce2c",
      "revId": "8288f8f217600b5c74828e88431a5fb201db5ced",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a742a96_e09c9321",
        "filename": "BUILD",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-27T21:57:20Z",
      "side": 1,
      "message": "Jepp, Viktar added support for single-file-html based plugins here:\n\n* https://gerrit-review.googlesource.com/#/c/gerrit/+/100331\n\nDavid fixed some issue, that approach had here:\n\n* https://gerrit-review.googlesource.com/#/c/gerrit/+/116870\n\nCurrently, vulcanize machinery per default apply Cripser to achieve Content Security Policy (SCP) compliance, and split one single html file in two: html and js:\n\n* https://www.polymer-project.org/1.0/docs/tools/advanced#crisper\n\nThis is currently not supported. My idea with zip wouldn\u0027t actually work. I think, to move forward right now, we have two options:\n\n* 1. Don\u0027t apply crisper, and not be CSP compliant by making cripser step optional and provide single vulcanized html file as plugin artifact.\n* 2. Build JAR as final plugin artifact, ship both generated html and JS file and provide html file as entry point. Such entry point, implemented as Java Module would be very similar to this polymer plugin entry point: [1], with the only exception, that codemirror-editor.html would be provided.\n\n* [1] https://chromium.googlesource.com/infra/gerrit-plugins/buildbucket/+/master/src/main/java/com/googlesource/chromium/plugins/buildbucket/BuildBucketModule.java#17",
      "parentUuid": "a3fe2079_93b48adc",
      "revId": "8288f8f217600b5c74828e88431a5fb201db5ced",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a189407_94f8ad27",
        "filename": "BUILD",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-28T08:09:02Z",
      "side": 1,
      "message": "If I use intermediate artifact vulcanized.html and put it in \u003cgerrit_site\u003e/plugins directory, it works, the plugin is discover and loaded: [1].\n\n  [2017-11-28 08:37:33,234] [main] INFO  com.google.gerrit.server.plugins.PluginLoader : Loaded plugin codemirror-editor, version editor\n\nCurently it\u0027s not obvious, how that intermediate is created and where it\u0027s located. You would need to use -s bazel build options to actually see it, here in standalone build mode [2].\n\nSo that for me, on Linux, this vulcanized html is located here:\n\n  bazel-out/k8-fastbuild/genfiles/codemirror-editor.html.vulcanized.html\n\nI started this discussion on tis Bazel issue, how to optionally produce this artifact: [3].\n\n* [1] https://imgur.com/a/hihP3\n* [2] http://paste.openstack.org/show/627541\n* [3] https://github.com/bazelbuild/bazel/issues/2882",
      "parentUuid": "2a742a96_e09c9321",
      "revId": "8288f8f217600b5c74828e88431a5fb201db5ced",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00699f09_ba3c0622",
        "filename": "BUILD",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-28T13:55:49Z",
      "side": 1,
      "message": "If we pass split \u003d False to vulcanize method, using this diff: [1]:\n\n  vulcanize(\n      name \u003d \"codemirror-editor\",\n      srcs \u003d [\"editor.html\"],\n      app \u003d \"editor.html\",\n      split \u003d False,\n      visibility \u003d [\"//visibility:public\"],\n      deps \u003d [\"//lib/js:codemirror-minified\"],\n  )\n\nit should produce one single html file, that is our final plugin artefact. We copy that html file in \u003cgerrit_site\u003e/plugins directory, and the plugin should just work. I haven\u0027t tested the diff: [1], though.\n\n* [1] http://paste.openstack.org/show/627585/",
      "parentUuid": "5a189407_94f8ad27",
      "revId": "8288f8f217600b5c74828e88431a5fb201db5ced",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc90b57f_89c5d568",
        "filename": "BUILD",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2017-11-28T18:55:13Z",
      "side": 1,
      "message": "This sounds perfect to me. Will test the output and see if it breaks anything else!",
      "parentUuid": "00699f09_ba3c0622",
      "revId": "8288f8f217600b5c74828e88431a5fb201db5ced",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d38848_6d4294c8",
        "filename": "BUILD",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-28T19:30:44Z",
      "side": 1,
      "message": "\u003e This sounds perfect to me. Will test the output and see if it\n \u003e breaks anything else!\n\nSorry, I\u0027m only able to look at my blind diff right now, and am noticing some issues. Will fix them in a moment.",
      "parentUuid": "fc90b57f_89c5d568",
      "revId": "8288f8f217600b5c74828e88431a5fb201db5ced",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}